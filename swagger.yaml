openapi: 3.0.0
info:
  title: Your API
  version: 1.0.0
  description: API documentation for your application

servers:
  - url: http://localhost:3000
    description: Local server

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
    ForbiddenError:
      description: Insufficient permissions
    NotFoundError:
      description: Resource not found

security:
  - BearerAuth: []

paths:
  /login:
    post:
      summary: Login a user
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                password:
                  type: string
              required:
                - email
                - password
      responses:
        200:
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  user:
                    type: object
        401:
          $ref: '#/components/responses/UnauthorizedError'

  /comments/{id}:
    get:
      summary: Get comment by ID
      tags:
        - Comments
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Comment found
          content:
            application/json:
              schema:
                type: object
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'

  /posts/{post_id}/comments:
    get:
      summary: Get comments by post ID
      tags:
        - Comments
      parameters:
        - name: post_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Comments found
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
    post:
      summary: Create a comment
      tags:
        - Comments
      security:
        - BearerAuth: []
      parameters:
        - name: post_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
              required:
                - content
      responses:
        201:
          description: Comment created
        401:
          $ref: '#/components/responses/UnauthorizedError'

  /comments/{id}:
    delete:
      summary: Delete comment by ID
      tags:
        - Comments
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        204:
          description: Comment deleted
        401:
          $ref: '#/components/responses/UnauthorizedError'

  /images/{id}:
    get:
      summary: Get image by ID
      tags:
        - Images
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Image found
          content:
            application/json:
              schema:
                type: object
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'

  /users:
    get:
      summary: Get users
      tags:
        - Users
      responses:
        200:
          description: Users found
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
        401:
          $ref: '#/components/responses/UnauthorizedError'
    post:
      summary: Create a user
      tags:
        - Users
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
                name:
                  type: string
                username:
                  type: string
                presentation:
                  type: string
              required:
                - email
                - password
                - name
                - username
      responses:
        201:
          description: User created
        401:
          $ref: '#/components/responses/UnauthorizedError'

  /users/{uuid}:
    get:
      summary: Get user by UUID
      tags:
        - Users
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: User found
          content:
            application/json:
              schema:
                type: object
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
    delete:
      summary: Delete user by UUID
      tags:
        - Users
      security:
        - BearerAuth: []
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
      responses:
        204:
          description: User deleted
        401:
          $ref: '#/components/responses/UnauthorizedError'
    put:
      summary: Update user by UUID
      tags:
        - Users
      security:
        - BearerAuth: []
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                name:
                  type: string
                username:
                  type: string
                presentation:
                  type: string
      responses:
        200:
          description: User updated
        401:
          $ref: '#/components/responses/UnauthorizedError'

  /users/{uuid}/password:
    put:
      summary: Update user password by UUID
      tags:
        - Users
      security:
        - BearerAuth: []
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
              required:
                - password
      responses:
        200:
          description: User password updated
        401:
          $ref: '#/components/responses/UnauthorizedError'

  /users/{uuid}/posts:
    get:
      summary: Get posts by user UUID
      tags:
        - Users
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Posts found
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'

  /posts:
    get:
      summary: Get all posts
      tags:
        - Posts
      responses:
        200:
          description: Posts found
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
        401:
          $ref: '#/components/responses/UnauthorizedError'
    post:
      summary: Create a post
      tags:
        - Posts
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title:
                  type: string
                images:
                  type: array
                  items:
                    type: string
                    format: binary
              required:
                - title
                - images
      responses:
        201:
          description: Post created
        401:
          $ref: '#/components/responses/UnauthorizedError'

  /posts/{id}:
    get:
      summary: Get post by ID
      tags:
        - Posts
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Post found
          content:
            application/json:
              schema:
                type: object
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
    delete:
      summary: Delete post by ID
      tags:
        - Posts
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        204:
          description: Post deleted
        401:
          $ref: '#/components/responses/UnauthorizedError'
