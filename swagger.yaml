openapi: 3.0.0
info:
    title: Sample API
    description: Example API using Swagger/OpenAPI 3.0
    version: 1.0.0

servers:
    - url: http://localhost:3000/api/v1
      description: Development server

paths:
    /users:
        get:
            summary: Get all users
            tags:
                - Users
            responses:
                "200":
                    description: A list of users
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: "#/components/schemas/User"

        post:
            summary: Create a new user
            tags:
                - Users
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/UserCreate"
            responses:
                "201":
                    description: User created successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    data:
                                        type: string
                                        example: f1a377c83f864eebafb6abb236f7c47b
                                    message:
                                        type: string
                "400":
                    description: Invalid input

    /users/{userId}:
        parameters:
            - in: path
              name: userId
              required: true
              schema:
                  type: string
              description: ID of the user to retrieve
        get:
            summary: Get a user by ID
            tags:
                - Users
            responses:
                "200":
                    description: User details
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/User"
                "404":
                    description: User not found

        put:
            summary: Update a user by ID
            tags:
                - Users
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/UserUpdate"
            responses:
                "200":
                    description: User updated successfully
                "400":
                    description: Invalid input
                "404":
                    description: User not found

        delete:
            summary: Delete a user by ID
            tags:
                - Users
            responses:
                "204":
                    description: User deleted successfully
                "404":
                    description: User not found

    /users/{uuid}/posts:
        parameters:
            - in: path
              name: uuid
              required: true
              schema:
                  type: string
                  example: f1a377c8-3f86-4eeb-afb6-abb236f7c47b
              description: ID of the user whose posts to retrieve
        get:
            summary: Get posts by user UUID
            tags:
                - Users
            parameters:
                - $ref: "#/components/parameters/UserId"
                - in: query
                  name: page
                  schema:
                      type: integer
                      example: 1
                  description: Page number
                - in: query
                  name: limit
                  schema:
                      type: integer
                      example: 5
                  description: Number of posts per page
            responses:
                "200":
                    description: List of posts by user UUID
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: "#/components/schemas/Post"
                "404":
                    description: User not found
                "500":
                    description: Internal server error

    /posts:
        get:
            summary: Get all posts
            tags:
                - Posts
            responses:
                "200":
                    description: A list of posts
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: "#/components/schemas/Post"

        post:
            summary: Create a new post
            tags:
                - Posts
            requestBody:
                required: true
                content:
                    multipart/form-data:
                        schema:
                            type: object
                            properties:
                                user_uuid:
                                    type: string
                                    example: f1a377c8-3f86-4eeb-afb6-abb236f7c47b
                                title:
                                    type: string
                                    example: Sample Post
                                images:
                                    type: array
                                    items:
                                        type: string
                                        format: binary
                            required:
                                - user_uuid
                                - title
                                - images
            responses:
                "201":
                    description: Post created successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    data:
                                        type: integer
                                        example: 1
                                    message:
                                        type: string
                "400":
                    description: Invalid input

    /posts/{postId}:
        parameters:
            - in: path
              name: postId
              required: true
              schema:
                  type: integer
              description: ID of the post to retrieve
        get:
            summary: Get a post by ID
            tags:
                - Posts
            responses:
                "200":
                    description: Post details
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Post"
                "404":
                    description: Post not found

        put:
            summary: Update a post by ID
            tags:
                - Posts
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/PostUpdate"
            responses:
                "200":
                    description: Post updated successfully
                "400":
                    description: Invalid input
                "404":
                    description: Post not found

        delete:
            summary: Delete a post by ID
            tags:
                - Posts
            responses:
                "204":
                    description: Post deleted successfully
                "404":
                    description: Post not found

components:
    schemas:
        User:
            type: object
            properties:
                uuid:
                    type: string
                    example: f1a377c83f864eebafb6abb236f7c47b
                email:
                    type: string
                    example: john.doe@example.com
                name:
                    type: string
                    example: John Doe
                username:
                    type: string
                    example: john_doe
                presentation:
                    type: string
                    example: A brief introduction
                isAdmin:
                    type: boolean
                    example: false

        UserCreate:
            type: object
            properties:
                email:
                    type: string
                    example: john.doe@example.com
                password:
                    type: string
                    example: secret
                name:
                    type: string
                    example: John Doe
                username:
                    type: string
                    example: john_doe
                presentation:
                    type: string
                    example: A brief introduction
            required:
                - email
                - password
                - name
                - username

        UserUpdate:
            type: object
            properties:
                email:
                    type: string
                    example: john.doe@example.com
                name:
                    type: string
                    example: John Doe
                username:
                    type: string
                    example: john_doe
                presentation:
                    type: string
                    example: A brief introduction
            required:
                - email
                - name
                - username

        Post:
            type: object
            properties:
                id:
                    type: integer
                    example: 1
                user_uuid:
                    type: string
                    example: f1a377c8-3f86-4eeb-afb6-abb236f7c47b
                title:
                    type: string
                    example: Sample Post

        PostCreate:
            type: object
            properties:
                user_uuid:
                    type: string
                    example: f1a377c8-3f86-4eeb-afb6-abb236f7c47b
                title:
                    type: string
                    example: Sample Post
                images:
                    type: array
                    items:
                        type: string
                        format: binary
            required:
                - user_uuid
                - title
                - images

        PostUpdate:
            type: object
            properties:
                title:
                    type: string
                    example: Updated Post Title
            required:
                - title

        Image:
            type: object
            properties:
                id:
                    type: integer
                    example: 1
                post_id:
                    type: integer
                    example: 1
                image:
                    type: string
                    format: binary
            required:
                - post_id
                - image

        Error:
            type: object
            properties:
                message:
                    type: string

    parameters:
        userId:
            in: path
            name: userId
            required: true
            schema:
                type: string
                example: f1a377c8-3f86-4eeb-afb6-abb236f7c47b

        postId:
            in: path
            name: postId
            required: true
            schema:
                type: integer
                example: 1

responses:
    BadRequest:
        description: Invalid request

    NotFound:
        description: Resource not found

    Unauthorized:
        description: Unauthorized access

    InternalServerError:
        description: Internal server error
